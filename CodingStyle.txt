Indentations are 4 spaces in size.  No hard tabs, since everybody sets their
tab size to something different, and the code will look funky in any tabsize
other than the one that was used when the code was written.

Member variables should use the "camel" notation.
Locals and parameters can be whatever you want, really.  Just be reasonable.
(eg.  thisIsAMemberVariable, thisisalocal)  Globals can be whatever too.

Class names should follow the Java convention.  (eg. ThisIsAClass)

Namespaces should be all lowercase, of the same name as the directory
to which they correspond.  The contents of nontrivial namespaces should
be placed in a directory whose name is the same as that of the namespace.

Filenames and directories should be all lowercase, so as to minimize fuss with operating
systems that are sensitive about filename case.

Containers should be plural, despite the fact that entity[i] looks more sensical
than entities[i].

Function names should be verbs.  Accessors should use the GetXXX form.  They
should use camel notation, with the first letter capitalized.  Methods which query
the state of a class should use getState(), isState() or somesuch.

    exampleMethod();
    blah()
    isEmpty()
    getCount()

Types which have a size should expose it as the type's "count".  There are too many terms
one could use for this sort of thing; we need to pick one and stick with it. (this obviously
doesn't apply to multidimensional containers like matrices)

Prefer the 'struct' keyword over 'class'.  Structs are identical to classes, except that
they default to public inheritance and visibility.  This helps to reduce the amount of
syntactic clutter a little.  Don't explicitly state the type of inheritance being used
unless it differs from the default.

Private data belongs at the end of the class, not the beginning.

Preprocessor constants should be in all uppercase, with underscores dilineating
words. (ie THIS_IS_A_CONSTANT)  Use const variables wherever possbile. (they
should follow the usual variable convention)

Prefer #pragma once over inclusion guards.  GCC 3.x and MSVC both support it,
which is close enough to a de-facto standard to me.  It's less typing, easier to
get right, and harder to get wrong.  Further, it reduces macro namespace
clutter.

Braces usually belong on the same line as their initiating construct.
Cheating and putting the whole block on the same line is acceptable
if it is a trivial operation, and it doesn't result in excessive line length.
(more than 120 characters or so)

The end brace should line up with the first line of the construct.
(ie K&R bracing style)

example:

    struct MyTestClass : BaseClass {
        void DoSomethingInteresting(int x, int y) {
            bool mylocal;

            if (mylocal) { x++; y--; }

            if (_myProperty) {
               ...
            } else {
               ...
            }
        }

    private:
        bool _myProperty;
    };

Whenever possible, wrap globals in a meaningful namespace.  The simple fact
is that globals are a pain in the ass, but being overly OOP is retarded too.
Balance accordingly.

Every line of code is *not* to be commented.  A single line/paragraph
describing the general jist of a section may be needed if the code becomes
complex, but if more than that is needed, then you need to simplify it anyway.
The idea is to make the code will comment itself, not to double the code size
with an english translation of the entire engine. ;)  Doxygen comments in header
files are a plus.
