Indentations are 4 spaces in size.  No hard tabs, since everybody sets their
tab size to something different, and the code will look funky in any tabsize
other than the one that was used when the code was written. ;)

Member variables should use the "camel" notation, with a leading underscore.
Locals can be whatever you want, really.  Just be reasonable. ;)
(eg.  _thisIsAMemberVariable, thisisalocal)  Globals can be whatever too.
Class names should follow the Java convention.  (eg. ThisIsAClass)  Namespaces
should do the same.

Containers should be plural, despite the fact that entity[i] looks more sensical
than entities[i].

Function names should be verbs.  Accessors should use the GetXXX form.  They
should use camel notation, with the first letter capitalized.

Preprocessor constants should be in all uppercase, with underscores dilineating
words. (ie THIS_IS_A_CONSTANT)  Use const variables wherever possbile. (they
should follow the usual variable convention)

Braces should be on their own line.  Cheating and putting both on the same line
is acceptable if it's a trivial operation, and it doesn't result in excessive
line length. (more than 120 characters or so)

ie.
class MyTestClass
{
    bool _myProperty;

public:
    void DoSomethingInteresting(int x, int y)
    {
        bool mylocal;

        if (mylocal) { x++; y--; }

        if (_myProperty)
        {
           ...
        }
        else
        {
           ...
        }
    }
};

Whenever possible, wrap globals in a meaningful namespace.  The simple fact
is that globals are a pain in the ass, but being overly OOP is retarded too.
Balance accordingly.

Every line of code is *not* to be commented.  A single line/paragraph
describing the general jist of a section may be needed if the code becomes
complex, but if more than that is needed, then you need to simplify it anyway.
The idea is to make the code will comment itself, not to double the code size
with an english translation of the entire engine. ;)  Doxygen comments in header
files are a big plus.
