Code layout

    - Indentations MUST be four spaces.

    - Hard tabs MUST NOT be used.
        As tab sizes are variable, code will be difficult to read if the tab
        size is set to something other than what it was written using.

    - Opening braces SHOULD be on the same line as their construct.
        Do not putt the whole condition on one line, even if it is a very short
        condition.

    - Braces MUST be placed around `if` and `while` bodies.
        Even if they only consist of a single statement.

    - Closing braces SHOULD be in the same column as their construct.

    - The `struct` SHOULD be prefered over `class`.
        Structs are identical to classes, except that they default to public
        inheritance and visibility.  This reduces the amount of syntactic
        clutter.

    - The type of inheritance being used MUST NOT be explicitly stated unless
      it differs from the default.

    - Private data MUST be placed at the end of a class.

    - `#pragma once` SHOULD be used instead of inclusion guards.
        GCC 3.x and MSVC both support it, which is close enough to a de facto
        standard.  It is less typing, easier to get right and harder to get
        wrong.  Furthermore, it reduces macro namespace clutter.

    - Putting multiple statements on a single line is acceptable if (and only
      if) both statements are extremely simple *and related*.

        struct MyTestClass : BaseClass {
            void doSomethingInteresting(int x, int y) {
                bool mylocal;

                if (mylocal) {
                    x++; y--;
                }

                if (myProperty) {
                   ...
                } else {
                   ...
                }
            }

        private:
            bool myProperty;
        };


Declarations and behaviour

    - Accessors and query methods SHOULD NOT have side effects.

    - `const` variables SHOULD be used.

    - Global variables SHOULD be wrapped in a meaningful namespace.
        Global variables are a nuisance, but do not obsess over proper OOP in
        the face of C APIs that demand global state.


Naming conventions

    - Member variables and class attributes SHOULD be camelCase.

    - `const` variables SHOULD be camelCase.

    - Class names SHOULD be MixedCase.

    - Namespaces SHOULD be all lowercase.

    - Namespaces SHOULD share a name with a directory to which they correspond.

    - The contents of large namespaces SHOULD be placed in a directory whose
      name is the same as that of the namespace.

    - Filenames and directories SHOULD all be lowercase.
        This is to minimize fuss with operating systems that are case
        sensitive.

    - Containers SHOULD be plural.
        Even though entity[i] looks more sensical than entities[i].

    - Function names SHOULD be verbs.

    - Accessors SHOULD be of the form `getXyz`.
        example: getCount()

    - Methods that return a yes/no query about the state of an object SHOULD
      be of the form `isXyz`.
        example: isEmpty()

    - Container types SHOULD have `Count` as a suffix.
        And not "size" or "length".  (This does not apply to multi-dimensional
        containers.)
        example: getEntityCount()

    - Macros SHOULD be all capitals with underscores separating words.
        example: THIS_IS_A_MACRO

    - Local variables and parameters MAY be whatever you want.
        Just be reasonable.
        example: thisIsAMemberVariable, thisisalocal

    - Globals MAY be whatever.


Comments

    - Comments MUST NOT restate the obvious.

    - Every line of code SHALL NOT be commented.
        A single line or paragraph describing the jist of a section may be
        needed if the code becomes complex, but if more than that is needed,
        then it should be simplified.  Code should comment itself, and should
        not have an English translation.

    - Doxygen comments in header files SHOULD be used where method names are
      not adequately descriptive.


C# code

    - The .NET naming conventions MUST be used.
        All public symbols MUST use MixedCase.

    - Braces and indentation SHOULD be written as outlined in this document.


Python code

    - Python code SHOULD use the naming convention outlined here.

    - Blocks SHOULD use four space indents without any hard tabs.
        This is doubly important in a language like Python, where whitespace is
        syntactically significant.
