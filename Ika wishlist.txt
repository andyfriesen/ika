#### CORE STUFF ####

======== Sound
Swordsman:
    Not very complicated.
    Music, sound effects, that's about it.
Sluimers:
    The music is no longer working (for 64-bit linux machines?)

======== Graphics
Swordsman:
    Quite a bit more complicated than sound.
    It'd be nice to unify the image and canvas object types, if possible. At the very least, it'd be nice to have the same methods available to canvases that are available to images, and vice versa
    Being able to switch between fullscreen and windowed modes would be great too. 
    The next version of sdl might make this possible, or textures could be backed in software so they don't get trashed during the transition.
    We're currently using immediate mode to draw everything. Using retained mode would probably speed things up a lot, especially for layer rendering.
    I think having a separation between "internal" and "external" resolution was talked about at one point, maybe figure that out
    There's probably a lot more that needs to be added to this section


======== Networking
Swordsman:
    Even though the socket and urllib modules exist, it might be a good idea to add some basic, simple network stuff. Probably wouldn't be terribly difficult to add, either...


======== Save data
Swordsman:
    A standard save format might be helpful. Might help with debugging, parsing, etc.


======== Control Input
Swordsman:
    It'd be nice if keyboard input were easier to deal with than manually checking the state of every key 
    and seeing if shift or capslock are activated and throwing in control codes on top of that and    sorta guessing which order they were all pressed in and hoping you're right
    ^ so, something like Input.keyboard.recv_text?
    ^ a list containing the order in which keys got pressed and released might be useful too (I believe this is the way sdl returns this stuff anyway, so this should be somewhat easy)
    default key mappings for Input.ok, Input.cancel, etc, would probably encourage people to use those over Input.keyboard['RETURN'], Input.keyboard['WHATSTHATKEYCODEAGAIN'], etc.
    ^ possibly set these in a config file, like user.cfg, or game.ika-game?
    mouse stuff? mouse support seems fine I guess, no problems I can think of


======== File Formats
Swordsman:
    aries.py needs to be cleaned up. xml could be an alternative, but aries is a lot cleaner and simpler, so we should probably just stick with it, I think
    I think aries.py is stable right now, but the interface might need a little work.
    The sprite and map formats might need a bit of cleanup.
    ^ the scripts node in the sprite format is a little weird, if I remember correctly...
    ^ the nodes in the map format are inconsistent between versions 1.0, 1.1, and 1.2, and a bit ambiguous. ...if I remember correctly.
    Tilesets should probably be implemented in aries. (Fonts too?)
    Tileset paths should be relative to the map, not the executable. This will make things much easier for editors and tools.
    Possibly add support for .ttf fonts and that sorta thing?
    Not exactly a format spec thing, but being able to manipulate tileset/sprite data as canvases (even if only just for reading) would be quite handy, if possible




#### GAMEDEV ####

======== Tools and Editors
Swordsman:
    Yeah, this is the main thing we need to get done right now I guess.
    This is probably too ambitious, but for the sake of thought, it'd be nice to have some sorta standard widget library that could be run from either inside ika, 
    or on top of wxwidgets, and implement each file format plugin as a semi-standalone thing, so that small changes could be made during testing/debugging.
    Can't really think of much else to put here, probably just things we still need to get done, like what's broken, not implemented yet, or needs polishing

======== Libraries
Swordsman:
    Stuff like igl, things that don't really go in the core of the engine, but provide common functionality that most people will need.
    It's probably important to note that any libraries that would be considered standard should be well documented and stable, otherwise people probably won't use them.


======== Realtime Dev/Debug
Swordsman:
    Mentioned a bit in tools and editors.
    ^ Even if the stuff mentioned it there doesn't happen, it'd probably still be handy to have some sort of debug library, like,
    ^ being able to press a key, go into a mini-editor mode,
    ^ fix broken obstructions/zones (and save the map, so there's some point to this),
    ^ display the current global and local scopes to see what's happening in the code,
    ^ maybe halt the current music track and try another, to see what fits, etc.
    
    * Sluimers: Whoa there! Aren't we looking a bit too far ahead? 

Sluimers:
    ^ Adjustable max width to the tilesetpanel in order to scroll horizontally. (I happen to use a really large and wide tileset)
    ^ Improve loading time of ika's tileset
    ^ Being able to add/delete/move tiles in the tileset editor -> tileset panel (this would require an adjustment in ika-tileset)
    ^ Improving the way tiled zones are made. I would love to be able to make one big zones out of tiles. 
    ^ Perhaps it's also better to to group zones and entities in ika-map on type instead of keep adding them individually.  

======== Game Project Collaboration
Swordsman:
    For a lot of projects, there'll probably be multiple people working on a team.
    I'm not sure if there's anything to add to this section, but I thought it was worth mentioning.
    There's already svn and git/github, so... Yeah.
    Maybe something will come to mind later.


======== Python Stuff
Swordsman:
    Should we stick with 2.6, or switch over to 3.1? Have versions of both? Wait a while? Maybe switch to 2.7?
    Sticking with 2.6/2.7 seems easiest for now, I think.
Sluimers:
    I already made ika switch to 3.1. Iked can't switch to 3.1 as of yet as wxPython needs to make that step first.

======== Packaging
Swordsman:
    The format games get distributed in. Not much to say here right now, really. Except for linux stuff.
    Stick the .py's, .ika-map's, etc., in a zip along with the .exe/.dlls and that's it.
    Possibly a bit different for linux.
    Ubuntu/Debian take .debs, Gentoo uses portage, archlinux uses yum... I think most distros can do .deb, actually
    I think it might also possible to drop all the necessary stuff into a zip and bypass any need for a package manager, but it depends on various factors
Sluimers:
    For linux, the aim should be to get ika/iked on the Ubuntu Universe archive and similar (I'd like to know their names) archives for yum and portage to maximize our reach.

======== Distribution
Swordsman:
    How games get from developers to players.
    Typically, stuff will be on ika.sf.net, or rpgmaker.net, or the developer's website, or something like that.
    If we port to consoles though, we could probably have a browser that connected to an online database of ika games and demos, making it quick and simple to try out new games and stuff. 
    Connect, select game, click download, play.
    ^ basically, it'd be similar to the wii's homebrew browser, or ubuntu's synaptic.


======== Platform
Swordsman:
    Currently, windows.
    Linux is just about ready now too, I think.
    Porting to xbox, wii, and ds probably wouldnt be very hard either.
    Possibly mac later on?
    Java though jython would make web applets possible, and probably cellphones,
    ^ but it'd require a bit of forethought since the graphics capabilities are quite a bit different for java,
    ^ unless you require security escalation for the applet, which should be avoided, since that's kind of an all-or-nothing deal.

#### COMMUNITY-ISH THINGS ####

======== Community
Swordsman:
    gotta make sure the website works, the forums work, the docs are available, etc.
    people need to be able to talk to eachother and discuss things when stuff is broken or people are confused, etc.


======== Docs and Support
Swordsman:
    gotta make sure everything important is documented sufficiently
    ...a wiki might be handy for this purpose


======== Feedback
Swordsman:
    forums, email, irc, etc.
    no real problems here as far as I can tell (but then, how would you be able to tell? hm.)


======== Engine Development
Swordsman:
    thorough build instructions are important. there should be instructions for every platform on which the engine is built. projects rarely do this well. 
    It's really frustrating figuring out why things won't build :/


======== Website
Swordsman:
    It's nice when the website works properly.
    the forums act sorta funny and things occasionally vanish with no explanation, but other than that, things are sorta ok I guess :)
Sluimers:
    1) I want admin rights. Reason: It needs activity.
    2) The signature in the forum is broken. 
    3) Uploading articles or games does nothing. Waiting for a moderator to show up is not what I'm waiting for.
    I hate waiting and I'm sure I'm not the only one here.
    If we're so concerned on abuse, why not let people upload stuff which can only be reached privately (using a password), before a moderator sees if it's deemed worthy 
    for the public to see? 
    I'd feel so much better to see my stuff uploaded on the website, even when it can only be reached privately. 
    4) I suggest that we should have the option to add articles and this wishlist much the same way tvtropes or wikipedia does.
    This way it's easy to contribute to our community.


