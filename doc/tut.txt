yo

ika has squat for documentation, so here's my best shot at a tutorial.  I'm going to try to be a bit original in my approach and simply keep a diary of sorts.  This will be a log of what I did, how I did it, and most importantly, WHY.  I hope its useful.

My goal here is to make a very simple RPG using ika.  I will use some of Python's object functionality, but I won't go too in depth, to keep things simple.

The game will involve a single charater, a la the first Dragon Warrior.  There will be battles with single enemies, and there will be a number of spells and items to use, equip, cast, etc....

Anyhow, without further adeu, let's begin.

I downloaded the same zip that I made freely available to everybody into an empty directory.

I deleted the CHRs and VSPs, and maps, simply because I wanted to go over the process of creating them from images in this here document. :)

I booted up winmaped, and created a fresh, 100x100 tile map.  I decided to stick with 16x16 tiles, just because I already had some drawn, and I didn't want to draw more.  I could have gone with any size, I suppose, but I'm no artist, so I'll take the easy way out.

Instead of suffering winmaped's tile editor, I decided to simply import a tileset from a PNG.  It's included in this zip, look for tiles.png.  Looking at the import dialogue window, I selected the proper options.  Winmaped creates 100 tiles for you with a new map, and I wasn't particularly attached to them, so I unselected the "append to existing tileset" option, and left the size at 16x16, since that just so happened to be the size of my tiles.  Each tile was in fact padded, so I left the padding option on.  After entering the filename, I clicked OK, and the tileset was imported.

I quickly skipped over to the map properties, still within winmaped (edit -> map properties) and changed the name of the VSP, so that winmaped wouldn't save it as UNTITLED.VSP.  I picked tiles.vsp, since that's what they are, and I lack imagination.  I then saved the map as outside.map, since I had decided (on a whim) to make this the overworld map.

For extra fun, I decided it'd be nice to use the overlay tiles I had to work with, so I created an extra layer. (edit -> add layer)  As the dialog window warned me, I quickly opened the map properties screen, and added a '2' to the end of the render string, so as to make the new layer visible.

I spent a little while dumping tiles on the map, making oceans, islands and so forth.  I used ctrl+drag to copy areas, and right clicked to mass-paste all over the map, which made the process much faster.

I wasn't doing anything ultraspiffy, so I just used the obstruction thingie to block off all the water tiles. (edit -> cool stuff -> obstruction thingie)

Now, I had a map.  Next up, I needed a CHR, which, again, I'm using an existing image to create, charles.bmp. (it should be in the zip along with this here document) I made sure the BMP was 24 bits, and used CHRMAK16, because that's about all there is.  After spending a few moments whipping up a mak file, I invoked CHRMAK16, specifying the makefile as a parameter.  Bammo, CHR file.

At this point, I was all set to get started.  I decided to start off with a very simple test, just to make sure that everything was in working order.  I created a new file, and saved it with the filename 'system.py'.  It consisted of solely this:

from std import *				# gives us access to ika's builtins

map.Switch('outside.map')		# switch to the proper map
player=Entity(50,50,'charles.chr')	# spawn a new entity
SetPlayer(player)				# and give the player control

Nothing fancy, just enough to get the ball rolling.

To top it off, I simply ran ika.exe.

I ran into a single problem, as you can see in screen1.png.  I had wanted the entities to be drawn upon both layers one and two, however, they were under layer 2.  I opened up WinMapEd yet again, and looked at the map properties. (edit -> map properties)  As I had thought, I had incorrectly set the render string when I had hastily added the second layer.  I changed it from 1ER2 to 12ER, so that layer 2 would be drawn before, and not after the entities.  I tested it again in the engine to verify.

So, I had in my hands a working testbox, I could move the player around, and it wouldn't go places that I didn't want it to go.  Next up, I wanted a few functions to make my life easier.  So, I created a new python file, named it player.py, and started shoving handy dandy little things in it to help make moving the player around easier.

I decided to give IDLE (it's part of the standard python distribution) a chance, and I was quite pleased with it.  If you don't use TextPad, IDLE is the next best choice.

After twiddling around for a few minutes, I came up with three basic functions that I knew I'd use a lot.  Warp, MapSwitch, and PartyMove.  I made them all function just like they do in V1/2, for simplicity.

Now that I had a bit of a base whipped up, I adjusted system.py to make use of it.

from std import *				# still need this
from player import *			# my new player module

player=Entity(0,0,'charles.chr')	# The position arguments are just dummies now, we'll change them in a moment
SetPlayer(player)				# ditto	
MapSwitch(player,'outside.map',54 * 16,9 * 16)	# whoosh!

For extra amusement, I added a nonplayer entity to the map via winmaped.  I filled in a few of the blanks, namely the sprite name (same as the player, since I'm cheap) and a few other minor details.  Most notably, I entered "TestEvent" in the activation script field.  This will be the name of the function that is called when we activate this entity.

Having that done, I proceeded to write said event function.  Using IDLE still, I created a new source file, called outside.py (same filename as the map) and started with a very simple script.

from std import *

def TestEvent():
   Exit("It worked!")

Not very robust, but it did something.  I now had an entity that could seppuku the engine at whim.  Too bad Lord Stan couldn't do that. ;)

Now that I had a player onscreen, and the ability to manipulate it easier, I decided to get some text manipulation type routines in place.  I felt the urge to get a bit fancy, and to make a window object.  That way, the window style is not only easy to change, but we could have several window styles working at the same time!   You can see what I came up with in window.py, it didn't turn out to be a very involved object, but it was plenty for my purposes at the time.

I decided to get fancy with the textbox as well.  It didn't need its own object, but I wanted one that would automatically word-wrap.  Instead of accepting a specific number of string variables, I wanted one that would accept a single string, and split it up accordingly.

I copied in a word-wrapper that I had written previously, simply because it already works, and I'm lazy. ;)  You can take a look at it in misc.py.  It should be pretty straightforward, if you understand how Python slices strings.

The rest of the script was similarly simple.  It calculates a few things, then loops.  In order to maintain proper animation order, I opted to re-render the map and textbox at every iteration over the loop.	